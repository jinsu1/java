/*
 * This source file was generated by the Gradle 'init' task
 */
package kr.jinsu.retrofit_ex;

import java.util.List;

import kr.jinsu.model.News;
import kr.jinsu.service.MyDataService;
import okhttp3.OkHttpClient;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class App01 {
    public static void main(String[] args) {
        //접속하고자 하는 기본 주소 정의
        String baseUrl = "http://localhost:3001";

        //통신 객체를 생성하기 위한 builder 객체 정의 
        OkHttpClient.Builder httpClientBuilder = new OkHttpClient.Builder();

        //Builder를 통해 통신객체 생성
        OkHttpClient httpClient = httpClientBuilder.build();

        //Retrofit을 생성하는 기능을 수행하는 객체 정의
        Retrofit.Builder builder = new Retrofit.Builder();

        //기본 주소를 지정
        builder.baseUrl(baseUrl);

        //통신 결과를 Gson 객체를 통해 처리하도록 Gson연결 == > JSON 파싱 자동화
        builder.addConverterFactory(GsonConverterFactory.create());

        //통신객체를 연결
        builder.client(httpClient);

        //모든 설정이 반영된 Retrofit 객체 생성
        Retrofit retrofit = builder.build();

        //Retro 객체를 통해 서비스 객체를 생성한다.
        MyDataService service = retrofit.create(MyDataService.class);

        //메서드를 호출에서 call 객체를 리턴받는다.
        Call<List<News>> call = service.getNews();

        call.enqueue(new Callback<List<News>>() {
            @Override
            public void onResponse(Call<List<News>> call, Response<List<News>> response) {
                List<News> list = response.body();

                for(News d : list) {
                    System.out.printf("author: %s, \n", d.getAuthor());
                    System.out.printf("title: %s, \n", d.getTitle());
                    System.out.printf("description: %s, \n", d.getDescription());
                    System.out.printf("url: %s, \n", d.getUrl());
                    System.out.printf("image: %s, \n", d.getImage());
                    System.out.printf("datetime: %s\n", d.getDatetime());
                }
            }

            @Override
            public void onFailure(Call<List<News>> call, Throwable t) {
                System.out.println("[통신 에러 발생~!!]");
                System.out.println(call.toString());
                t.printStackTrace();
            }
        });
        //통신을 종료
        httpClient.dispatcher().executorService().shutdown();
    }
}
